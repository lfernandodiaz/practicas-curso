# To really understand GraphQL, go to https://graphql.org/learn/

type Book {
  authors: [String!]
  cacheId: ID!
  id: ID!
  name: String
  date: String
}

type User {
  id: String
  firstname: String
  lastname: String
  email: String
  validate: Boolean
}

type UserCreated {
  Id: String
  Href: String
  DocumentId: String
}

type UserDeleted {
  response: String
}
type UserEdited {
  response: String
}

# It is necessary to generate input types for creating books
# ref: http://graphql.org/graphql-js/mutations-and-input-types/
input BookInput {
  authors: [String!]
  cacheId: ID
  id: ID
  name: String
  date: String
}

input UserInput {
  email: String
  firstname: String
  lastname: String
  validate : Boolean
}


type Query {
  # Cache control can only be set at root fields
  book(id: ID!): Book
  books(from: Int = 0, to: Int = 4): [Book] @cacheControl(scope: PUBLIC, maxAge: SHORT)
  total: Int

  """
  Returns a markdown source given an id
  """
  source(id: ID!): String
  user(email: String!): User
  users: [User]
}

type Mutation {
  # You should always return the whole object in a mutation, not only a boolean. This will help in browser caching
  delete(id: String): Boolean
  editBook(id: ID!, book: BookInput!): Book
  newBook(book: BookInput!): Book
  newUser(user: UserInput!) : UserCreated
  deleteUser(email: String!): UserDeleted
  editUser(email:String!, firstname: String!, lastname: String!, validate: Boolean! ) : UserEdited
}
